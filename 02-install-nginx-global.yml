---
- hosts: all
  become: true
  vars:
    nginx_arch: "amd64"

    
    nginx_apt_codename: >-
      {% set release = ansible_distribution_release | lower %}
      {% if release in ['noble', 'jammy'] %}
        jammy
      {% elif release in ['lunar'] %}
        lunar
      {% else %}
        {{ release }}
      {% endif %}

  tasks:
    - name: Ensure /etc/apt/keyrings exists (required for Ubuntu 22.04+/Jammy and newer)
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        owner: root
        group: root
        mode: '0755'
      tags: ['nginx', 'repo']

    - name: Download Nginx ASCII GPG key
      ansible.builtin.get_url:
        url: https://nginx.org/keys/nginx_signing.key
        dest: /etc/apt/keyrings/nginx_signing.key
        mode: '0644'
        force: true
      tags: ['nginx', 'repo']

    - name: Remove existing nginx signing keyring if exists
      ansible.builtin.file:
        path: /etc/apt/keyrings/nginx-signing.gpg
        state: absent
      tags: ['nginx', 'repo']

    - name: Convert Nginx key to binary format (gpg --dearmor)
      ansible.builtin.command: gpg --dearmor -o /etc/apt/keyrings/nginx-signing.gpg /etc/apt/keyrings/nginx_signing.key
      tags: ['nginx', 'repo']

    - name: Fix permissions for nginx signing keyring
      ansible.builtin.file:
        path: /etc/apt/keyrings/nginx-signing.gpg
        owner: root
        group: root
        mode: '0644'
      tags: ['nginx', 'repo']

    - name: Clean apt cache
      ansible.builtin.apt:
        update_cache: no
        autoclean: yes
      tags: ['nginx', 'repo']

    - name: Add Nginx official repository with signed-by option
      ansible.builtin.apt_repository:
        repo: "deb [arch={{ nginx_arch }} signed-by=/etc/apt/keyrings/nginx-signing.gpg] http://nginx.org/packages/ubuntu {{ nginx_apt_codename }} nginx"
        state: present
        filename: nginx
        update_cache: yes
      tags: ['nginx', 'repo']

    - name: Install Nginx
      ansible.builtin.apt:
        name: nginx
        state: latest
        update_cache: yes
      tags: ['nginx', 'install']

    - name: Check if CSF is already installed
      ansible.builtin.stat:
        path: /etc/csf/csf.conf
      register: csf_config_exists
      tags: ['firewall', 'csf', 'security', 'system']

    - name: Download CSF (ConfigServer Security & Firewall) from GitHub
      ansible.builtin.get_url:
        url: https://github.com/waytotheweb/scripts/blob/main/csf.tgz?raw=true
        dest: /tmp/csf.tgz
        mode: '0644'
        timeout: 60
        force: true
      tags: ['firewall', 'csf', 'security', 'system']
      when: not ansible_check_mode and not csf_config_exists.stat.exists

    - name: Extract CSF tarball to /tmp with verification
      ansible.builtin.unarchive:
        src: /tmp/csf.tgz
        dest: /tmp
        remote_src: yes
        creates: /tmp/csf
        mode: '0755'
        validate_certs: false
      register: csf_extract_result
      failed_when: csf_extract_result is failed
      tags: ['firewall', 'csf', 'security', 'system']
      when: not ansible_check_mode and not csf_config_exists.stat.exists

    - name: Verify CSF extraction was successful
      ansible.builtin.stat:
        path: /tmp/csf/install.sh
      register: csf_install_script
      failed_when: not csf_install_script.stat.exists
      tags: ['firewall', 'csf', 'security', 'system']
      when: not ansible_check_mode and not csf_config_exists.stat.exists

    - name: Install CSF using the installation script
      ansible.builtin.command:
        cmd: /bin/sh install.sh
        chdir: /tmp/csf
        creates: /etc/csf/csf.conf
      register: csf_install_result
      failed_when: csf_install_result.rc != 0
      tags: ['firewall', 'csf', 'security', 'system']
      when: not ansible_check_mode and not csf_config_exists.stat.exists

    - name: Clean up CSF installation files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/csf.tgz
        - /tmp/csf
      tags: ['firewall', 'csf', 'security', 'system']
      when: not ansible_check_mode

    - name: Ensure Nginx runs as www-data user
      ansible.builtin.lineinfile:
        path: /etc/nginx/nginx.conf
        regexp: '^user\s+.*;'
        line: 'user www-data;'
        state: present
      notify: Restart Nginx
      tags: ['nginx', 'config']


    - name: "Ensure 'include /etc/nginx/sites-enabled/*;' is present in Nginx http block"
      ansible.builtin.lineinfile:
        path: /etc/nginx/nginx.conf
        line: "    include /etc/nginx/sites-enabled/*;"
        state: present
        insertafter: "^\\s*include\\s+/etc/nginx/conf.d/\\*.conf;"
        backup: yes 
      notify: Restart Nginx
      tags: ['nginx', 'config', 'sites_enabled']

    - name: Ensure Nginx service is started and enabled
      ansible.builtin.systemd:
        name: nginx
        state: started
        enabled: yes
      tags: ['nginx', 'service']

  handlers:
    - name: Restart Nginx
      ansible.builtin.systemd:
        name: nginx
        state: restarted
