# Ansible Playbook: 13-setup-cdn.yml
# Author: Sayyed Jamal Ghasemi
# Full Stack Developer
# Email: jamal13647850@gmail.com
# LinkedIn: https://www.linkedin.com/in/jamal1364/
# Instagram: https://www.instagram.com/jamal13647850
# Telegram: https://t.me/jamaldev
# Website: https://jamalghasemi.com
# Date: 2025-06-05
#
# Purpose: This playbook configures CDN (Content Delivery Network) settings
# for WordPress sites. It installs and configures the "CDN Enabler" plugin
# if CDN is enabled for the domain.
# It relies on 'domain_config' variables, typically defined in group_vars.

- hosts: all
  become: true
  vars:
    # These variables should be defined in group_vars/all.yml (generated by generate_config.sh)
    effective_enable_cdn: "{{ domain_config.enable_cdn | default(GLOBAL_ENABLE_CDN | default(false)) }}"
    effective_enable_local_cdn: "{{ domain_config.enable_local_cdn | default(GLOBAL_ENABLE_LOCAL_CDN | default(false)) }}" # For self-hosted CDNs or specific local providers

    is_any_cdn_feature_enabled: "{{ (effective_enable_cdn | bool) or (effective_enable_local_cdn | bool) }}"

    wp_domain_path: "/var/www/{{ domain_config.domain }}/html"

    # CDN URL to be configured in the CDN Enabler plugin.
    # Example: https://cdn.example.com or https://mycdn.arvancloud.com/my-site/
    # This variable MUST be defined if effective_enable_cdn or effective_enable_local_cdn is true.
    effective_cdn_enabler_url: "{{ domain_config.cdn_enabler_url | default(GLOBAL_CDN_ENABLER_URL_PATTERN | default('')) }}"
    # GLOBAL_CDN_ENABLER_URL_PATTERN could be like 'https://cdn.' + domain_config.domain if a pattern exists,
    # but it's safer to let the user specify the full URL.

    # CDN provider name (informative, for log/debug messages)
    # effective_cdn_provider: "{{ domain_config.cdn_provider | default(GLOBAL_CDN_PROVIDER | default('generic')) }}"
    # effective_local_cdn_provider: "{{ domain_config.local_cdn_provider | default(GLOBAL_LOCAL_CDN_PROVIDER | default('custom_local')) }}"

  # Playbook execution conditions
  when:
    - domain_config is defined
    - domain_config.platform is defined and domain_config.platform == "wordpress"
    - is_any_cdn_feature_enabled | bool

  tasks:
    - name: "Fail if CDN is enabled but CDN Enabler URL is not provided"
      ansible.builtin.fail:
        msg: "CDN is enabled for {{ domain_config.domain }}, but 'domain_config.cdn_enabler_url' is not defined or is empty. Please provide a valid CDN URL."
      when: effective_cdn_enabler_url | length == 0

    - name: "Install and activate CDN Enabler plugin on {{ domain_config.domain }}"
      ansible.builtin.shell:
        cmd: "wp plugin install cdn-enabler --activate --allow-root"
      args:
        chdir: "{{ wp_domain_path }}"
      register: cdn_enabler_install_result
      changed_when: "'already installed' not in cdn_enabler_install_result.stdout and ('activated' in cdn_enabler_install_result.stdout or 'Success: Installed and activated' in cdn_enabler_install_result.stdout)"
      failed_when: cdn_enabler_install_result.rc != 0 and 'already installed and active' not in cdn_enabler_install_result.stdout and 'already installed' not in cdn_enabler_install_result.stdout
      tags: ['cdn', 'wordpress', 'plugin', 'cdn-enabler']

    - name: "Configure CDN Enabler plugin with CDN URL for {{ domain_config.domain }}"
      ansible.builtin.shell:
        cmd: "wp option update cdn_enabler '{ \"url\": \"{{ effective_cdn_enabler_url }}\" }' --format=json --allow-root"
        # The CDN Enabler plugin stores its options as a JSON array in the 'cdn_enabler' option.
        # The key for the CDN URL is 'url' within this array.
        # Example of how it was before (for reference, the plugin changed how it saves options):
        # cmd: "wp option patch update cdn_enabler url {{ effective_cdn_enabler_url | quote }} --allow-root"
      args:
        chdir: "{{ wp_domain_path }}"
      changed_when: true # Assume option update always causes a change for notification/logging purposes
      tags: ['cdn', 'wordpress', 'plugin', 'cdn-enabler', 'config']

    - name: "Provide guidance for CDN setup for {{ domain_config.domain }}"
      ansible.builtin.debug:
        msg:
          - "----------------------------------------------------------------------------------"
          - "ACTION REQUIRED: CDN Setup Guidance for {{ domain_config.domain }}"
          - "----------------------------------------------------------------------------------"
          - "The 'CDN Enabler' plugin has been installed/activated and configured with the CDN URL: {{ effective_cdn_enabler_url }}"
          - "For a fully functional CDN, please complete the following steps (mostly outside this Ansible playbook):"
          - ""
          - "1. DNS Configuration:"
          - "   - Create a DNS record (usually CNAME) for your CDN hostname '{{ effective_cdn_enabler_url | urlsplit('hostname') }}'."
          - "   - This record must point to the endpoint provided by your CDN service (e.g., 'xyz.cdnprovider.com')."
          - "   - Example: If CDN URL is 'https://mycdn.example.com', CNAME 'mycdn.example.com' -> 'xyz.cdnprovider.com'."
          - ""
          - "2. CDN Provider Portal/Service Setup:"
          - "   - If using a commercial CDN (KeyCDN, BunnyCDN, AWS CloudFront, etc.):"
          - "     - Create a 'Pull Zone' (most common for CDN Enabler)."
          - "     - Set your main domain '{{ domain_config.domain }}' (e.g., 'https://{{ domain_config.domain }}') as the 'Origin Server' for this Pull Zone."
          - "     - Review and configure cache settings, SSL options, and other features in your CDN provider's dashboard."
          - "   - If using a self-hosted CDN or a reverse proxy (like Nginx) as your CDN:"
          - "     - Ensure the server/service at '{{ effective_cdn_enabler_url }}' is correctly configured to pull, cache, and serve static assets from '{{ domain_config.domain }}'."
          - ""
          - "3. SSL Certificate for CDN Hostname:"
          - "   - Your CDN hostname '{{ effective_cdn_enabler_url | urlsplit('hostname') }}' MUST have a valid SSL certificate."
          - "   - Most CDN providers offer free SSL (e.g., via Let's Encrypt integration) or allow you to upload your own custom certificate."
          - ""
          - "4. Cache Management:"
          - "   - Understand how to purge or invalidate the CDN cache. This is crucial when you update your website's static content (CSS, JS, images)."
          - ""
          - "5. Testing:"
          - "   - After completing all configurations, thoroughly test your website."
          - "   - Use browser developer tools to:"
          - "     a. Verify that static assets are being served from the CDN URL: {{ effective_cdn_enabler_url }}"
          - "     b. Check for any 'mixed content' warnings if your main site is HTTPS."
          - "     c. Inspect HTTP response headers from CDN assets to confirm caching behavior (e.g., X-Cache, Cache-Control, Age)."
          - ""
          - "Important Note on Reverse Proxy CDNs (e.g., Cloudflare):"
          - "   - If you are using Cloudflare's proxy (orange cloud activated) for your main domain ('{{ domain_config.domain }}'), Cloudflare itself is already acting as a CDN."
          - "   - In such cases, using the 'CDN Enabler' plugin with a *different* CDN URL might be unnecessary or could lead to complex caching interactions, unless you have a specific advanced setup in mind."
          - "   - If Cloudflare is your sole CDN, typically no additional WordPress CDN plugin is needed; optimize caching via Cloudflare's dashboard."
          - ""
          - "This Ansible playbook primarily automates the WordPress plugin part. The actual CDN service configuration and DNS changes are your responsibility and depend on your chosen CDN solution."
          - "----------------------------------------------------------------------------------"
      tags: ['cdn', 'info', 'post_actions']