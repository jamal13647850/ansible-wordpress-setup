# laravel/08-laravel-telescope.yml
- hosts: all
  become: true
  vars:
    _app_domain: "{{ domain_config.domain }}"
    _laravel_webroot: "/var/www/{{ _app_domain }}/html"
    _web_user: "www-data" # Ou o usuário que executa o PHP/Nginx
    _web_group: "www-data" # Ou o grupo que executa o PHP/Nginx

    # Esta variável deve ser definida em group_vars/all.yml através do generate_config.sh
    # Exemplo: domain_config.enable_telescope ou GLOBAL_LARAVEL_ENABLE_TELESCOPE
    effective_enable_telescope: "{{ domain_config.enable_telescope | default(GLOBAL_LARAVEL_ENABLE_TELESCOPE | default(false)) }}"
    
    # Path para o dashboard do Telescope. Pode ser configurado por domínio.
    effective_telescope_path: "{{ domain_config.telescope_path | default('telescope') }}"
    
    # Habilita o Telescope em produção. CUIDADO: Pode expor dados sensíveis.
    # Por padrão, Telescope só é habilitado em ambientes não produtivos.
    # domain_config.laravel_app_env deve ser 'production', 'local', 'development', etc.
    _is_production_env: "{{ (domain_config.laravel_app_env | default('production') | lower) == 'production' }}"
    _allow_telescope_in_production: "{{ domain_config.telescope_allow_in_production | default(false) | bool }}"
    
    # Determina se o Telescope deve ser habilitado no .env
    # Habilitado se:
    #   1. Não é produção OU
    #   2. É produção E _allow_telescope_in_production é true
    _final_telescope_enabled_env_setting: "{{ (not _is_production_env) or (_is_production_env and _allow_telescope_in_production) }}"


  when:
    - domain_config is defined
    - domain_config.platform is defined and domain_config.platform == "laravel"
    - effective_enable_telescope | bool

  tasks:
    - name: "Ensure laravel_app_env is defined for Telescope logic"
      ansible.builtin.fail:
        msg: "Required variable 'domain_config.laravel_app_env' is not defined for Telescope setup of {{ _app_domain }}. This is needed to determine if the environment is production."
      when: domain_config.laravel_app_env is not defined

    - name: "Install Laravel Telescope package for {{ _app_domain }}"
      ansible.builtin.shell:
        cmd: "composer require laravel/telescope --dev" # --dev é recomendado para Telescope
        chdir: "{{ _laravel_webroot }}"
      become: true
      become_user: "{{ _web_user }}"
      register: telescope_composer_require_result
      changed_when: "'Nothing to install or update' not in telescope_composer_require_result.stdout and 'Generating autoload files' in telescope_composer_require_result.stdout"
      failed_when: telescope_composer_require_result.rc != 0
      tags: ['laravel', 'telescope', 'composer', 'install']

    - name: "Publish Telescope assets and configuration for {{ _app_domain }}"
      ansible.builtin.shell:
        cmd: |
          php artisan telescope:install
          php artisan vendor:publish --provider="Laravel\Telescope\TelescopeServiceProvider" --tag="telescope-config" --tag="telescope-migrations" --force
        chdir: "{{ _laravel_webroot }}"
      become: true
      become_user: "{{ _web_user }}"
      register: telescope_install_result
      # telescope:install geralmente não tem output se já foi feito, vendor:publish tem.
      changed_when: "'Published' in telescope_install_result.stdout or 'Copied' in telescope_install_result.stdout or 'successfully' in telescope_install_result.stdout_lines | join(' ')"
      tags: ['laravel', 'telescope', 'artisan', 'config']

    - name: "Run Laravel migrations for Telescope on {{ _app_domain }}"
      ansible.builtin.shell:
        cmd: "php artisan migrate --force"
        chdir: "{{ _laravel_webroot }}"
      become: true
      become_user: "{{ _web_user }}"
      register: telescope_migration_result
      changed_when: "'Nothing to migrate.' not in telescope_migration_result.stdout and telescope_migration_result.rc == 0 and ('Migrating' in telescope_migration_result.stdout or 'Migrated' in telescope_migration_result.stdout)"
      failed_when: telescope_migration_result.rc != 0 and 'Nothing to migrate.' not in telescope_migration_result.stdout
      tags: ['laravel', 'telescope', 'db', 'migrations']

    - name: "Configure Telescope path in config/telescope.php for {{ _app_domain }}"
      ansible.builtin.lineinfile:
        path: "{{ _laravel_webroot }}/config/telescope.php"
        regexp: "^(\\s*)('path'\\s*=>\\s*)'.*',$"
        line: "\\1\\2'{{ effective_telescope_path }}',"
        backrefs: yes
        owner: "{{ _web_user }}"
        group: "{{ _web_group }}"
        mode: '0644'
      notify: Clear Laravel Config Cache
      tags: ['laravel', 'telescope', 'config']
      when: effective_telescope_path != 'telescope' # Só altera se for diferente do default do Telescope

    - name: "Set TELESCOPE_ENABLED in .env for {{ _app_domain }}"
      ansible.builtin.lineinfile:
        path: "{{ _laravel_webroot }}/.env"
        regexp: "^TELESCOPE_ENABLED="
        line: "TELESCOPE_ENABLED={{ 'true' if _final_telescope_enabled_env_setting else 'false' }}"
        owner: "{{ _web_user }}"
        group: "{{ _web_group }}"
        mode: '0600' # .env file should be private
      notify: Clear Laravel Config Cache
      tags: ['laravel', 'telescope', 'env', 'config']

    - name: "Ensure Telescope's /storage/oauth-private.key and oauth-public.key have correct permissions (if they exist)"
      ansible.builtin.file:
        path: "{{ _laravel_webroot }}/storage/{{ item }}"
        owner: "{{ _web_user }}"
        group: "{{ _web_group }}"
        mode: '0600' # Chaves devem ser privadas
      loop:
        - "oauth-private.key"
        - "oauth-public.key"
      when: "ansible_check_mode == false" # Evita erro se os arquivos não existirem no check_mode
      ignore_errors: true # Ignora se os arquivos não existirem (Telescope pode não usar OAuth por padrão)
      tags: ['laravel', 'telescope', 'permissions']
      
    - name: "Ensure Telescope entry points are not blocked by Nginx generic rules"
      ansible.builtin.debug:
        msg: |
          Telescope for {{ _app_domain }} is configured.
          Dashboard should be accessible at: https://{{ _app_domain }}/{{ effective_telescope_path }}
          Make sure your Nginx configuration (e.g., in templates/laravel-nginx.conf.j2)
          does not inadvertently block access to this path if it's within 'public' directory
          or if you have very restrictive rules for subdirectories.
          The default Laravel Nginx config usually allows /index.php to handle routing.
          If Telescope assets (CSS/JS) are not loading, check Nginx error logs and
          ensure that vendor assets published by Telescope are publicly accessible.
          You might need to run 'php artisan storage:link' if not already done,
          and ensure 'php artisan vendor:publish --tag=telescope-assets --force' was successful
          (though telescope:install usually handles this).
      tags: ['laravel', 'telescope', 'info']

  handlers:
    - name: Clear Laravel Config Cache
      ansible.builtin.shell:
        cmd: "php artisan config:cache" # config:clear também pode ser usado, config:cache é para produção
        chdir: "{{ _laravel_webroot }}"
      become: true
      become_user: "{{ _web_user }}"
      listen: "Clear Laravel Config Cache"
      tags: ['laravel', 'cache', 'config']