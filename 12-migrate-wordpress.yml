# 12-migrate-wordpress.yml
- hosts: all
  become: true
  vars:
    # These variables are expected to be passed via --extra-vars when running this playbook manually.
    # Example:
    # ansible-playbook 12-migrate-wordpress.yml -i inventory \
    #   -e "enable_migration=true" \
    #   -e "migration_db_path_local=/path/to/your/backup.sql" \
    #   -e "migration_files_path_local=/path/to/your/files.tar.gz" \
    #   -e "old_site_url_for_search_replace=http://old.example.com" \
    #   -e '{ "domain_config": { "domain": "new.example.com", "platform": "wordpress", "mysql_db_name": "db_new", ... } }'

    # Variables derived from domain_config (which itself should be passed as an extra-var)
    _app_domain: "{{ domain_config.domain }}"
    _wp_webroot: "/var/www/{{ _app_domain }}/html"
    _app_db_name: "{{ domain_config.mysql_db_name }}"
    _app_db_user: "{{ domain_config.mysql_db_user }}"
    _app_db_password: "{{ domain_config.mysql_db_password }}" # Sensitive

    _new_site_url: "https://{{ _app_domain }}" # Assuming new site is HTTPS

    # Temporary paths on the remote server
    _remote_temp_db_path: "/tmp/migration_db_{{ _app_domain }}.sql"
    _remote_temp_files_path: "/tmp/migration_files_{{ _app_domain }}.tar.gz"

  # This playbook is for WordPress and runs only if enable_migration is explicitly true.
  when:
    - domain_config is defined
    - domain_config.platform is defined and domain_config.platform == "wordpress"
    - enable_migration | default(false) | bool
    - migration_db_path_local is defined and migration_db_path_local | length > 0
    - migration_files_path_local is defined and migration_files_path_local | length > 0
    - old_site_url_for_search_replace is defined and old_site_url_for_search_replace | length > 0

  tasks:
    - name: "Notify: Starting WordPress migration for {{ _app_domain }}"
      ansible.builtin.debug:
        msg: |
          Starting WordPress migration for domain: {{ _app_domain }}
          Source DB: {{ migration_db_path_local }}
          Source Files: {{ migration_files_path_local }}
          Old URL: {{ old_site_url_for_search_replace }}
          New URL: {{ _new_site_url }}
      tags: ['migration', 'info']

    - name: "Copy database backup from Ansible controller to server: {{ _remote_temp_db_path }}"
      ansible.builtin.copy:
        src: "{{ migration_db_path_local }}" # Path on Ansible controller
        dest: "{{ _remote_temp_db_path }}"
        mode: '0600'
      tags: ['migration', 'db_copy']

    - name: "Copy files archive from Ansible controller to server: {{ _remote_temp_files_path }}"
      ansible.builtin.copy:
        src: "{{ migration_files_path_local }}" # Path on Ansible controller
        dest: "{{ _remote_temp_files_path }}"
        mode: '0600'
      tags: ['migration', 'files_copy']

    - name: "Ensure target webroot directory {{ _wp_webroot }} exists and is empty (or remove contents)"
      ansible.builtin.file:
        path: "{{ _wp_webroot }}"
        state: absent # Remove old content first
      tags: ['migration', 'filesystem_prep']

    - name: "Re-create target webroot directory {{ _wp_webroot }}"
      ansible.builtin.file:
        path: "{{ _wp_webroot }}"
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'
      tags: ['migration', 'filesystem_prep']

    - name: "Restore database for {{ _app_domain }} from {{ _remote_temp_db_path }}"
      ansible.builtin.shell:
        # Ensure the database exists (created by 01-install-mysql.yml typically)
        # Drop and recreate or import can be chosen. Here we import into existing.
        cmd: "mysql --user={{ _app_db_user | quote }} --password={{ _app_db_password | quote }} {{ _app_db_name | quote }} < {{ _remote_temp_db_path | quote }}"
      no_log: true # To hide password from logs
      changed_when: true # Assume DB restore always changes state for subsequent tasks
      tags: ['migration', 'db_restore']

    - name: "Extract WordPress files to {{ _wp_webroot }}"
      ansible.builtin.unarchive:
        src: "{{ _remote_temp_files_path }}"
        dest: "{{ _wp_webroot }}"
        owner: www-data
        group: www-data
        remote_src: yes # The src is on the remote machine at this point
        # mode: preserve # This is not a standard option for unarchive, permissions are set by owner/group and umask
        # Permissions will be standard after extraction, might need adjustment via 24-secure-file-permissions.yml later.
      tags: ['migration', 'files_extract']

    - name: "Run WP-CLI search-replace to update URLs in database for {{ _app_domain }}"
      ansible.builtin.shell:
        cmd: "wp search-replace {{ old_site_url_for_search_replace | quote }} {{ _new_site_url | quote }} --all-tables --skip-columns=guid --report-changed-only --allow-root"
      args:
        chdir: "{{ _wp_webroot }}"
      register: wp_search_replace_result
      changed_when: "'Made 0 replacements' not in wp_search_replace_result.stdout and wp_search_replace_result.rc == 0"
      tags: ['migration', 'wpcli', 'db_update']
      # Consider adding --network if it's a multisite migration for the main site.

    - name: "Display WP-CLI search-replace results for {{ _app_domain }}"
      ansible.builtin.debug:
        var: wp_search_replace_result.stdout_lines
      when: wp_search_replace_result is defined and wp_search_replace_result.stdout_lines is defined
      tags: ['migration', 'wpcli', 'info']

    - name: "Clean up temporary migration files on server"
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ _remote_temp_db_path }}"
        - "{{ _remote_temp_files_path }}"
      tags: ['migration', 'cleanup']

    - name: "Final reminder to check site and flush permalinks for {{ _app_domain }}"
      ansible.builtin.debug:
        msg: |
          WordPress migration tasks for {{ _app_domain }} completed.
          It's highly recommended to:
          1. Manually log in to the WordPress admin area.
          2. Go to Settings > Permalinks and click "Save Changes" (even if you don't change anything) to flush rewrite rules.
          3. Thoroughly test the migrated site.
          4. Consider running 'wp option update home {{ _new_site_url }}' and 'wp option update siteurl {{ _new_site_url }}' if search-replace was not comprehensive.
      tags: ['migration', 'info', 'post_actions']