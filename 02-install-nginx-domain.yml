---
- hosts: all
  become: true
  vars:
    nginx_domain: "{{ domain_config.domain }}"
    nginx_php_version: "{{ domain_config.php_version | default(GLOBAL_PHP_DEFAULT_VERSION | default('8.2')) }}"
    nginx_enable_basic_auth: "{{ domain_config.enable_basic_auth | default(false) }}"
    nginx_basic_auth_user: "{{ domain_config.basic_auth_user | default('') }}"
    nginx_basic_auth_password: "{{ domain_config.basic_auth_password | default('') }}"
    nginx_arch: "amd64"

    nginx_apt_codename: >-
      {% set release = ansible_distribution_release | lower %}
      {% if release in ['noble', 'jammy'] %}
        jammy
      {% elif release in ['lunar'] %}
        lunar
      {% else %}
        {{ release }}
      {% endif %}

  tasks:
    - name: Create Nginx helper directory for domain {{ nginx_domain }}
      ansible.builtin.file:
        path: "/etc/nginx/sites-available/{{ nginx_domain }}helper"
        state: directory
        owner: root
        group: root
        mode: '0755'
      tags: ['nginx', 'config', 'domain_specific']

    - name: Copy general Nginx helper configuration files for domain {{ nginx_domain }}
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "/etc/nginx/sites-available/{{ nginx_domain }}helper/{{ item.dest }}"
        mode: "{{ item.mode | default('0644') }}"
        owner: root
        group: root
      loop:
        - { src: 'templates/cache.j2', dest: 'cache.conf' }
        - { src: 'templates/filemanager.j2', dest: 'filemanager.conf' }
        - { src: 'templates/general.j2', dest: 'general.conf' }
        - { src: 'templates/gzip.j2', dest: 'gzip.conf' }
        - { src: 'templates/keepalive.j2', dest: 'keepalive.conf' }
        - { src: 'templates/redirects.j2', dest: 'redirects.conf' }
        - { src: 'templates/securityheaders.j2', dest: 'securityheaders.conf' }
        - { src: 'templates/wordpress.j2', dest: 'wordpress.conf' }
      notify: Restart Nginx
      tags: ['nginx', 'config', 'domain_specific']

    - name: Template, execute, and schedule CDN IP sync script
      when: domain_config.enable_cdn | default(false) and domain_config.cdn_ip_source in ['arvancloud', 'cloudflare']
      block:
        - name: "Template {{ domain_config.cdn_ip_source }} IP sync script"
          ansible.builtin.template:
            src: "templates/{{ domain_config.cdn_ip_source }}-ip-sync.sh.j2"
            dest: "/etc/nginx/sites-available/{{ nginx_domain }}helper/{{ domain_config.cdn_ip_source }}-ip-sync.sh"
            owner: root
            group: root
            mode: '0755'

        - name: "Execute {{ domain_config.cdn_ip_source }} IP sync script to generate Nginx config"
          ansible.builtin.command:
            cmd: "bash {{ domain_config.cdn_ip_source }}-ip-sync.sh"
            chdir: "/etc/nginx/sites-available/{{ nginx_domain }}helper/"
          register: sync_script_result
          changed_when: sync_script_result.rc == 0
          notify: Restart Nginx

        - name: Display sync script output
          ansible.builtin.debug:
            var: sync_script_result.stdout_lines
          when: sync_script_result.stdout is defined

        - name: "Set up daily cron job to sync {{ domain_config.cdn_ip_source }} IPs"
          ansible.builtin.cron:
            name: "Update {{ domain_config.cdn_ip_source }} IPs for {{ nginx_domain }}"
            minute: "{{ 59 | random }}"
            hour: "{{ 5 | random(start=2) }}"
            job: "cd /etc/nginx/sites-available/{{ nginx_domain }}helper/ && bash ./{{ domain_config.cdn_ip_source }}-ip-sync.sh >/dev/null 2>&1"
            user: root
            cron_file: "ansible_cdn_sync_{{ nginx_domain | replace('.', '_') }}"
            state: present
      tags: ['nginx', 'config', 'cdn', 'domain_specific']

    - name: Install htpasswd utility (apache2-utils)
      ansible.builtin.apt:
        name: apache2-utils
        state: present
        update_cache: yes
      tags: ['nginx', 'utils', 'prerequisites']

    - name: Create .htpasswd file for Basic Authentication on {{ nginx_domain }}
      community.general.htpasswd:
        path: "/etc/nginx/sites-available/{{ nginx_domain }}helper/.htpasswd"
        name: "{{ nginx_basic_auth_user }}"
        password: "{{ nginx_basic_auth_password }}"
        owner: www-data
        group: root
        mode: '0640'
        state: present
      when: nginx_enable_basic_auth | bool and nginx_basic_auth_user and nginx_basic_auth_password
      notify: Restart Nginx
      tags: ['nginx', 'security', 'basic_auth', 'domain_specific']

    - name: Create Nginx logs directory for domain {{ nginx_domain }}
      ansible.builtin.file:
        path: "/var/www/{{ nginx_domain }}/logs"
        state: directory
        owner: www-data
        group: www-data
        mode: '0775'
      tags: ['nginx', 'config', 'logging', 'domain_specific']

    - name: Create Nginx cache directory for domain {{ nginx_domain }}
      ansible.builtin.file:
        path: "/etc/nginx/cache/{{ nginx_domain }}"
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'
      tags: ['nginx', 'config', 'cache', 'domain_specific']

    - name: "Check if SSL certificate already exists for {{ nginx_domain }}"
      ansible.builtin.stat:
        path: "/etc/letsencrypt/live/{{ nginx_domain }}/fullchain.pem"
      register: ssl_cert_stat

    - name: Copy initial/final Nginx site configuration for {{ nginx_domain }}
      ansible.builtin.template:
        src: "{{ 'templates/nginx.conf.j2' if ssl_cert_stat.stat.exists else 'templates/nginx-http-only.conf.j2' }}"
        dest: "/etc/nginx/sites-available/{{ nginx_domain }}.conf"
        mode: '0644'
        owner: root
        group: root
      notify: Restart Nginx
      tags: ['nginx', 'config', 'site_config', 'domain_specific']

    - name: Ensure /etc/nginx/sites-enabled directory exists
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled
        state: directory
        owner: root
        group: root
        mode: '0755'
      become: true
      tags: ['nginx', 'config', 'prerequisites', 'site_enable', 'domain_specific']

    - name: Enable Nginx site for {{ nginx_domain }}
      ansible.builtin.file:
        src: "/etc/nginx/sites-available/{{ nginx_domain }}.conf"
        dest: "/etc/nginx/sites-enabled/{{ nginx_domain }}.conf"
        state: link
        owner: root
        group: root
      notify: Restart Nginx
      tags: ['nginx', 'config', 'site_enable', 'domain_specific']

  handlers:
    - name: Restart Nginx
      ansible.builtin.systemd:
        name: nginx
        state: restarted