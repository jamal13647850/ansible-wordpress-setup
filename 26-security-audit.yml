# 26-security-audit.yml
- hosts: all
  become: true
  vars:
    # Determine if security audit policy is enabled for this run
    effective_security_audit_policy: "{{ domain_config.security_audit | default(GLOBAL_SECURITY_AUDIT_POLICY | default(true)) }}"
    # Note: 'domain_config' is available, but most tasks here are system-wide
    # or the custom script scans all relevant directories.

  # This entire playbook should only run if the security audit policy is enabled.
  when: effective_security_audit_policy | bool

  tasks:
    - name: Install common system security audit tools (Lynis, Rkhunter)
      ansible.builtin.apt:
        name:
          - lynis
          - rkhunter
        state: present
        update_cache: yes
      tags: ['security_audit', 'tools', 'system', 'lynis', 'rkhunter']

    - name: Set up system security audit cron job (Lynis & Rkhunter)
      ansible.builtin.cron:
        name: "System Security Audit (Lynis & Rkhunter)" # More generic name
        minute: "0"
        hour: "3" # Runs daily at 3 AM
        weekday: "0" # Runs on Sunday
        user: root
        job: "lynis audit system --cronjob > /var/log/lynis-audit.log 2>&1 && rkhunter --update --propupd > /dev/null 2>&1 && rkhunter --check --skip-keypress --report-warnings-only > /var/log/rkhunter-check.log 2>&1"
        state: present
      tags: ['security_audit', 'cron', 'system', 'lynis', 'rkhunter']
      # Added --propupd to rkhunter --update to update file properties database

    - name: Create WordPress security scan script at /usr/local/bin/wp-site-security-scan.sh
      ansible.builtin.copy:
        dest: /usr/local/bin/wp-site-security-scan.sh # Renamed for clarity
        content: |
          #!/bin/bash
          # WordPress Site Security Scanner
          # This script iterates through potential WordPress installations in /var/www/
          # and performs basic checks.

          LOG_FILE="/var/log/wp-site-security-scan.log"
          echo "WordPress Site Security Scan started at $(date)" > "$LOG_FILE"
          echo "==================================================" >> "$LOG_FILE"

          find /var/www/ -maxdepth 2 -type d -name "html" 2>/dev/null | while read -r site_path; do
            # Go up one level to get the domain directory
            domain_dir=$(dirname "$site_path")
            domain_name=$(basename "$domain_dir")

            if [ -f "$site_path/wp-config.php" ]; then
              echo "Scanning WordPress site: $domain_name at $site_path" | tee -a "$LOG_FILE"
              
              ( # Run checks in a subshell to isolate cd
                cd "$site_path" || { echo "ERROR: Could not cd to $site_path" >> "$LOG_FILE"; exit 1; }

                echo "--- Checking for world-writable PHP files..." >> "$LOG_FILE"
                find . -type f -name "*.php" -perm /o+w -ls >> "$LOG_FILE" 2>&1

                echo "--- Checking for common suspicious patterns (eval, base64_decode) in PHP files..." >> "$LOG_FILE"
                grep -rl --include='*.php' -E 'eval\s*\(' . >> "$LOG_FILE" || true
                grep -rl --include='*.php' -E 'base64_decode\s*\(' . >> "$LOG_FILE" || true
                
                if command -v wp &> /dev/null; then
                  echo "--- Checking WordPress core integrity..." >> "$LOG_FILE"
                  wp core verify-checksums --allow-root >> "$LOG_FILE" 2>&1 || echo "WP-CLI core verify-checksums failed or found issues for $domain_name" >> "$LOG_FILE"
                else
                  echo "WP-CLI not found, skipping core integrity check for $domain_name." >> "$LOG_FILE"
                fi
                echo "--- Scan completed for $domain_name ---" >> "$LOG_FILE"
              )
            else
              # Optional: Log sites found that are not WordPress, or just ignore
              # echo "Skipping $domain_name at $site_path (not a WordPress site - wp-config.php not found)" >> "$LOG_FILE"
              true
            fi
            echo "" >> "$LOG_FILE"
          done
          echo "==================================================" >> "$LOG_FILE"
          echo "WordPress Site Security Scan finished at $(date)" >> "$LOG_FILE"
        mode: '0755'
        owner: root
        group: root
      tags: ['security_audit', 'wordpress', 'script', 'custom_scan']

    - name: Set up WordPress site security scan cron job
      ansible.builtin.cron:
        name: "WordPress Site Security Scan"
        minute: "0"
        hour: "4" # Runs daily at 4 AM (or choose a different day, e.g., weekly)
        weekday: "*" # Runs daily, change to "1" for Monday if weekly is preferred
        user: root
        job: "/usr/local/bin/wp-site-security-scan.sh" # Log redirection is handled inside the script
        state: present
      tags: ['security_audit', 'wordpress', 'cron', 'custom_scan']