# 18-setup-waf.yml
- hosts: all
  become: true
  vars:
    # Esta variável deve ser definida em group_vars/all.yml (gerado por generate_config.sh)
    effective_enable_waf: "{{ domain_config.enable_waf | default(GLOBAL_ENABLE_WAF_DEFAULT | default(false)) }}"

    modsecurity_nginx_packages:
      - libmodsecurity3
      - libnginx-mod-http-modsecurity

    # Diretório onde as regras do OWASP CRS serão baixadas e configuradas
    owasp_crs_dir: "/etc/nginx/modsecurity/owasp-crs" # Pode variar dependendo da distribuição ou preferência
    owasp_crs_repo: "https://github.com/coreruleset/coreruleset.git"
    owasp_crs_version: "v4.0.0" # Especificar uma versão estável é recomendado

    # Arquivo de configuração principal do ModSecurity (geralmente fornecido pelo pacote libmodsecurity3)
    # O caminho pode variar. Este é um comum para Nginx.
    modsec_conf_main_file: "/etc/nginx/modsecurity/modsecurity.conf"
    # Outro caminho possível, se o Nginx estiver configurado para buscá-lo de lá:
    # modsec_conf_main_file_alt: "/etc/modsecurity/modsecurity.conf"

    # Arquivo que será criado para carregar as regras do OWASP CRS no Nginx/ModSecurity
    modsec_rules_include_file: "/etc/nginx/modsecurity/crs-include.conf"

  when: effective_enable_waf | bool

  tasks:
    - name: "Install ModSecurity library and Nginx connector module"
      ansible.builtin.apt:
        name: "{{ modsecurity_nginx_packages }}"
        state: present
        update_cache: yes
      register: waf_install_result
      tags: ['waf', 'security', 'modsecurity', 'system', 'install']

    - name: "Ensure base directory for ModSecurity Nginx exists"
      ansible.builtin.file:
        path: "/etc/nginx/modsecurity"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: "Download OWASP ModSecurity Core Rule Set (CRS) from GitHub"
      ansible.builtin.git:
        repo: "{{ owasp_crs_repo }}"
        dest: "{{ owasp_crs_dir }}"
        version: "{{ owasp_crs_version }}"
        depth: 1 # Clona apenas a versão especificada, sem histórico completo
      register: crs_git_clone_result
      tags: ['waf', 'security', 'modsecurity', 'owasp_crs']

    - name: "Copy OWASP CRS setup configuration example to crs-setup.conf"
      ansible.builtin.copy:
        src: "{{ owasp_crs_dir }}/crs-setup.conf.example"
        dest: "{{ owasp_crs_dir }}/crs-setup.conf"
        remote_src: yes
        owner: root
        group: root
        mode: '0644'
        force: no # Não sobrescreve se o usuário já o personalizou
      when: crs_git_clone_result.changed or not (ansible_check_mode) # Só copia se o clone foi feito ou não estamos em check_mode
      tags: ['waf', 'security', 'modsecurity', 'owasp_crs']

    - name: "Check if main ModSecurity configuration file exists"
      ansible.builtin.stat:
        path: "{{ modsec_conf_main_file }}"
      register: modsec_conf_stat
      tags: ['waf', 'security', 'modsecurity', 'config_check']

    - name: "Ensure ModSecurity Rule Engine is enabled in '{{ modsec_conf_main_file }}' (set to On or DetectionOnly)"
      ansible.builtin.lineinfile:
        path: "{{ modsec_conf_main_file }}"
        regexp: '^SecRuleEngine\s+(On|Off|DetectionOnly)'
        line: 'SecRuleEngine DetectionOnly' # Iniciar com DetectionOnly é mais seguro
        backrefs: yes
        owner: root
        group: root
        mode: '0644'
      when: modsec_conf_stat.stat.exists
      notify: Restart Nginx service # ModSecurity config change usually requires Nginx restart
      tags: ['waf', 'security', 'modsecurity', 'config']
      # Nota: Mudar para 'On' deve ser uma decisão consciente do usuário após o tuning.

    - name: "Create an include file for OWASP CRS rules to be loaded by ModSecurity/Nginx"
      ansible.builtin.blockinfile:
        path: "{{ modsec_rules_include_file }}"
        create: yes
        owner: root
        group: root
        mode: '0644'
        marker: "# {mark} ANSIBLE MANAGED BLOCK FOR OWASP CRS INCLUDES"
        block: |
          # Load ModSecurity main configuration (if not loaded globally by Nginx module)
          # IncludeOptional {{ modsec_conf_main_file }} 
          # (O carregamento do modsecurity.conf principal geralmente é feito pelo próprio módulo Nginx)

          # Load OWASP CRS Setup File
          Include {{ owasp_crs_dir }}/crs-setup.conf

          # Load OWASP CRS Rule Files
          # (A ordem pode ser importante, verifique a documentação do CRS)
          Include {{ owasp_crs_dir }}/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf.example # Copie para .conf e personalize
          Include {{ owasp_crs_dir }}/rules/REQUEST-901-INITIALIZATION.conf
          Include {{ owasp_crs_dir }}/rules/REQUEST-903.9001-DRUPAL-EXCLUSION-RULES.conf.example # Exemplo, se usar Drupal
          Include {{ owasp_crs_dir }}/rules/REQUEST-903.9002-WORDPRESS-EXCLUSION-RULES.conf.example # Exemplo, se usar WordPress
          # ... (adicione outras regras de exclusão específicas da aplicação ANTES das regras principais)

          # Regras principais de Request
          Include {{ owasp_crs_dir }}/rules/REQUEST-*.conf

          # Regras de Response (geralmente após as de Request)
          Include {{ owasp_crs_dir }}/rules/RESPONSE-*.conf
      notify: Restart Nginx service
      tags: ['waf', 'security', 'modsecurity', 'owasp_crs', 'config']

    - name: "Display ModSecurity setup status and guidance"
      ansible.builtin.debug:
        msg:
          - "----------------------------------------------------------------------------------"
          - "ACTION REQUIRED: ModSecurity WAF Setup Guidance"
          - "----------------------------------------------------------------------------------"
          - "ModSecurity packages installed: {{ 'Yes' if waf_install_result.changed or waf_install_result.rc == 0 else 'No/Failed' }}"
          - "OWASP Core Rule Set (CRS) {{ owasp_crs_version }} downloaded to: {{ owasp_crs_dir }}"
          - "OWASP CRS example setup copied to: {{ owasp_crs_dir }}/crs-setup.conf (if it didn't exist)."
          - "Main ModSecurity config: {{ modsec_conf_main_file }} (SecRuleEngine set to 'DetectionOnly')."
          - "OWASP CRS include file created/updated: {{ modsec_rules_include_file }}"
          - ""
          - "NEXT STEPS (CRITICAL - MANUAL INTERVENTION REQUIRED):"
          - "1. Review and Customize '{{ owasp_crs_dir }}/crs-setup.conf'. This file controls CRS behavior, paranoia levels, anomaly scoring, etc."
          - "2. Customize Exclusion Rules: Copy relevant .example exclusion rule files in '{{ owasp_crs_dir }}/rules/' to '.conf' (e.g., REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf) and tailor them to your application to prevent false positives."
          - "   - Especially for WordPress, Drupal, or other specific applications, activate their exclusion rule files (e.g., REQUEST-903.9002-WORDPRESS-EXCLUSION-RULES.conf)."
          - "3. Enable ModSecurity in Nginx: You MUST enable ModSecurity within your Nginx configuration (e.g., in the http block of /etc/nginx/nginx.conf or specific server blocks):"
          - "   nginx.conf / server block:"
          - "     modsecurity on;"
          - "     modsecurity_rules_file {{ modsec_rules_include_file }}; # This file includes the CRS rules"
          - "4. Test Thoroughly (in DetectionOnly mode first):"
          - "   - After enabling in Nginx and restarting, monitor ModSecurity logs (e.g., /var/log/modsec_audit.log or Nginx error logs) for false positives."
          - "   - Adjust paranoia levels in crs-setup.conf and add/tune exclusion rules as needed."
          - "5. Switch to Blocking Mode: Once you are confident with the rule set and have minimized false positives, change 'SecRuleEngine DetectionOnly' to 'SecRuleEngine On' in '{{ modsec_conf_main_file }}' and restart Nginx."
          - "6. Ongoing Monitoring & Maintenance: Regularly review logs and update the CRS to newer versions."
          - ""
          - "WARNING: Enabling WAF in blocking mode ('SecRuleEngine On') without proper testing and tuning WILL LIKELY BREAK parts of your website due to false positives."
          - "This playbook provides a BASE setup. Full WAF implementation is a significant task."
          - "----------------------------------------------------------------------------------"
      tags: ['waf', 'security', 'modsecurity', 'info']

  handlers:
    - name: Restart Nginx service
      ansible.builtin.systemd:
        name: nginx
        state: restarted
      listen: "Restart Nginx service"