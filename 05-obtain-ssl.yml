---
# -----------------------------------------------------------------------------
# Ansible Playbook for Obtaining and Configuring SSL Certificates
#
# Author: Sayyed Jamal Ghasemi
# Role: Full Stack Developer
# Email: jamal13647850@gmail.com
# LinkedIn: https://www.linkedin.com/in/jamal1364/
# Instagram: https://www.instagram.com/jamal13647850
# Telegram: https://t.me/jamaldev
# Website: https://jamalghasemi.com
# Date: 2025-06
# -----------------------------------------------------------------------------

- hosts: all
  become: true
  name: "Obtain and configure SSL certificates"

  vars:
    # Domain List Configuration for SSL Certificate Generation
    # =====================================================
    
    # Step 1: Initialize with the primary domain from configuration
    certbot_domain_list:
      - "{{ domain_config.domain }}"

    # Step 2: Smart www subdomain handling
    # Adds 'www.' prefixed version only if the domain doesn't already start with 'www.'
    # This prevents double prefixes like 'www.www.example.com'
    certbot_domain_list_final: >
      {{
        certbot_domain_list +
        ['www.' + domain_config.domain]
        if not domain_config.domain.startswith('www.')
        else certbot_domain_list
      }}

    # Step 3: Generate Certbot CLI domain arguments
    # Creates a space-separated list of '-d domain.com -d www.domain.com' format
    # Using Jinja2 loop instead of regex_replace for better reliability
    certbot_domains_cli: >
      {% for domain in certbot_domain_list_final %}-d {{ domain }}{% if not loop.last %} {% endif %}{% endfor %}

    # SSL Certificate Configuration
    # ============================
    
    # Migration scenario control - skips DNS validation when migrating servers
    skip_dns_check_for_migration: "{{ domain_config.skip_dns_check_for_migration | default(false) }}"

    # Email for Let's Encrypt registration (domain-specific or global fallback)
    effective_ssl_email: "{{ domain_config.ssl_email | default(GLOBAL_LETSENCRYPT_DEFAULT_EMAIL | default('')) }}"

    # Test certificate flag - uses Let's Encrypt staging environment for testing
    le_test_cert: "{{ domain_config.letsencrypt_test_cert | default(GLOBAL_LETSENCRYPT_TEST_CERT | default(false)) }}"

    # Certbot Command Options
    # ======================
    
    # Use staging server for test certificates (avoids rate limits during testing)
    le_staging_server_option: "{% if le_test_cert | bool %}--test-cert{% else %}{% endif %}"
    
    # Automatically redirect HTTP to HTTPS after certificate installation
    le_redirect_option: "--redirect"
    
    # Use Nginx plugin for automatic certificate installation and configuration
    le_nginx_plugin_option: "--nginx"

  tasks:
    - name: Install Certbot and its Nginx plugin package
      ansible.builtin.apt:
        name: python3-certbot-nginx
        state: latest
        update_cache: yes
      tags: ['ssl', 'certbot', 'prerequisites', 'system']

    - name: "Block for standard HTTP-01 challenge (Normal Install)"
      when: not skip_dns_check_for_migration
      block:
        - name: "Verify domain DNS resolves to this server's public IP"
          ansible.builtin.shell:
            cmd: |
              SERVER_IP=$(curl -s --connect-timeout 5 ifconfig.me || curl -s --connect-timeout 5 ipinfo.io/ip)
              if [ -z "$SERVER_IP" ]; then
                echo 'Failed to get server IP' >&2
                exit 1
              fi
              host {{ domain_config.domain }} | grep -q "$SERVER_IP"
          register: domain_resolves_to_server_ip
          ignore_errors: true
          changed_when: false

        - name: "Set DNS resolution status fact for SSL issuance"
          ansible.builtin.set_fact:
            dns_ok_for_ssl: "{{ domain_resolves_to_server_ip.rc == 0 }}"

        - name: "Obtain SSL certificate from Let's Encrypt using HTTP-01 challenge"
          ansible.builtin.command:
            cmd: >
              certbot {{ le_nginx_plugin_option }}
              {{ certbot_domains_cli }}
              --email {{ effective_ssl_email }}
              --agree-tos {{ le_redirect_option }}
              --non-interactive {{ le_staging_server_option | trim }}
          when: dns_ok_for_ssl | bool
          notify: Restart Nginx service
          register: certbot_result
          failed_when:
            - certbot_result.rc != 0
            - "'too many certificates already issued' not in certbot_result.stderr and 'rateLimited' not in certbot_result.stderr"
            - "'Unable to find a virtual host' not in certbot_result.stderr"
          changed_when: >
            certbot_result.rc == 0 and
            ("Successfully received certificate" in certbot_result.stdout or
             "Certificate not yet due for renewal" in certbot_result.stdout)
          tags: ['ssl', 'certbot', 'obtain_cert']

    - name: "Block for DNS-01 challenge (Migration Scenario)"
      when: skip_dns_check_for_migration
      block:
        - name: "DNS-01 Challenge Implementation Required (Migration Scenario)"
          ansible.builtin.debug:
            msg:
              - "==============================================="
              - "HTTP-01 VALIDATION SKIPPED - MIGRATION MODE"
              - "==============================================="
              - "Domain configuration: {{ domain_config.domain }}"
              - "Domains for certificate: {{ certbot_domain_list_final }}"
              - "Generated certbot arguments: {{ certbot_domains_cli }}"
              - ""
              - "ACTION REQUIRED: Implement DNS-01 challenge"
              - "Examples for common DNS providers:"
              - " • Cloudflare: certbot certonly --dns-cloudflare --dns-cloudflare-credentials /path/to/cloudflare.ini {{ certbot_domains_cli }}"
              - " • DigitalOcean: certbot certonly --dns-digitalocean --dns-digitalocean-credentials /path/to/digitalocean.ini {{ certbot_domains_cli }}"
              - " • AWS Route53: certbot certonly --dns-route53 {{ certbot_domains_cli }}"
              - ""
              - "Required steps:"
              - "1. Install appropriate certbot DNS plugin"
              - "2. Create credentials file with DNS API keys"
              - "3. Replace this debug task with actual DNS-01 command"
              - "==============================================="
          register: certbot_result
          changed_when: false

    - name: "Display Certbot command and result for debugging"
      ansible.builtin.debug:
        msg:
          - "Executed Certbot command with domains: {{ certbot_domains_cli }}"
          - "Domain list processed: {{ certbot_domain_list_final }}"
          - "Certbot result: {{ certbot_result }}"
        verbosity: 1
      when:
        - certbot_result is defined
        - "'msg' not in certbot_result"  # Avoid showing debug placeholder message
      tags: ['ssl', 'certbot', 'debug']

    - name: "Update Nginx configuration with SSL settings after certificate installation"
      ansible.builtin.template:
        src: "templates/nginx.conf.j2"
        dest: "/etc/nginx/sites-available/{{ domain_config.domain }}.conf"
        mode: '0644'
        owner: root
        group: root
        backup: yes  # Create backup of existing config before modification
      notify: Restart Nginx service
      when: certbot_result.changed | default(false)
      tags: ['ssl', 'nginx', 'finalize']

  handlers:
    - name: Restart Nginx service
      ansible.builtin.systemd:
        name: nginx
        state: restarted
      listen: "Restart Nginx service"
