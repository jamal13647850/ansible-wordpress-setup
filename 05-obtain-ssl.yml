# 05-obtain-ssl.yml
- hosts: all
  become: true
  vars:
    effective_domain: "{{ domain_config.domain }}"
    effective_ssl_email: "{{ domain_config.ssl_email | default(GLOBAL_LETSENCRYPT_DEFAULT_EMAIL | default('')) }}"
    le_test_cert: "{{ domain_config.letsencrypt_test_cert | default(GLOBAL_LETSENCRYPT_TEST_CERT | default(false)) }}"
    le_staging_server_option: "{% if le_test_cert | bool %}--test-cert{% else %}{% endif %}"
    le_redirect_option: "--redirect"
    le_nginx_plugin_option: "--nginx"
  tasks:
    - name: Install Certbot and its Nginx plugin
      ansible.builtin.apt:
        name: python3-certbot-nginx
        state: latest
        update_cache: yes
      tags: ['ssl', 'certbot', 'prerequisites', 'system']

    - name: "Check if domain '{{ effective_domain }}' resolves to this server's public IP"
      ansible.builtin.shell:
        cmd: "SERVER_IP=$(curl -s --connect-timeout 5 ifconfig.me || curl -s --connect-timeout 5 ipinfo.io/ip); if [ -z \"$SERVER_IP\" ]; then echo 'Failed to get server IP' >&2; exit 1; fi; host {{ effective_domain }} | grep -q \"$SERVER_IP\""
      register: domain_resolves_to_server_ip
      ignore_errors: true
      changed_when: false
      tags: ['ssl', 'dns_check']

    - name: "Set fact for DNS resolution status for {{ effective_domain }}"
      ansible.builtin.set_fact:
        dns_ok_for_ssl: "{{ domain_resolves_to_server_ip.rc == 0 }}"
      tags: ['ssl', 'dns_check']

    - name: "Display DNS resolution check result for {{ effective_domain }}"
      ansible.builtin.debug:
        msg: "DNS resolution for {{ effective_domain }} to this server's IP: {{ 'OK' if dns_ok_for_ssl else 'FAILED or NOT CHECKED (server IP could not be fetched)' }}. Output: {{ domain_resolves_to_server_ip.stdout | default('') }} {{ domain_resolves_to_server_ip.stderr | default('') }}"
      tags: ['ssl', 'dns_check']

    - name: "Check if SSL certificate already exists for {{ effective_domain }}"
      ansible.builtin.stat:
        path: "/etc/letsencrypt/live/{{ effective_domain }}/fullchain.pem"
      register: ssl_cert_stat
      tags: ['ssl', 'cert_check']

    - name: "Obtain SSL certificate with Certbot for {{ effective_domain }} (and www subdomain)"
      ansible.builtin.command:
        cmd: "certbot {{ le_nginx_plugin_option }} -d {{ effective_domain }} -d www.{{ effective_domain }} --email {{ effective_ssl_email }} --agree-tos {{ le_redirect_option }} --non-interactive {{ le_staging_server_option | trim }}"
      when:
        - not ssl_cert_stat.stat.exists
        - dns_ok_for_ssl | bool
      notify: Restart Nginx service
      register: certbot_result
      failed_when:
        - certbot_result.rc != 0
        - "'too many certificates already issued' not in certbot_result.stderr and 'rateLimited' not in certbot_result.stderr"
        - "'Unable to find a virtual host' not in certbot_result.stderr"
      changed_when: certbot_result.rc == 0 and ("Successfully received certificate" in certbot_result.stdout or "Certificate not yet due for renewal" in certbot_result.stdout)
      tags: ['ssl', 'certbot', 'obtain_cert']

    - name: "Display Certbot command result for {{ effective_domain }}"
      ansible.builtin.debug:
        var: certbot_result
        verbosity: 1
      when: certbot_result is defined
      tags: ['ssl', 'certbot', 'debug']

    - name: "Warning if domain '{{ effective_domain }}' DNS did not resolve correctly for SSL"
      ansible.builtin.debug:
        msg: "WARNING: The domain '{{ effective_domain }}' (or www) did not resolve to this server's IP or server IP could not be fetched. SSL certificate could not be automatically obtained by Certbot. Please check DNS records."
      when:
        - not ssl_cert_stat.stat.exists
        - not (dns_ok_for_ssl | bool)
      tags: ['ssl', 'dns_check', 'warning']

    - name: "Warning if Certbot failed for {{ effective_domain }} for other reasons"
      ansible.builtin.debug:
        msg: "WARNING: Certbot failed to obtain SSL certificate for '{{ effective_domain }}'. Review logs. Certbot stderr: {{ certbot_result.stderr | default('N/A') }}"
      when:
        - certbot_result is defined
        - certbot_result.rc != 0
        - not ("Successfully received certificate" in certbot_result.stdout or "Certificate not yet due for renewal" in certbot_result.stdout)
        - not ('too many certificates already issued' in certbot_result.stderr or 'rateLimited' in certbot_result.stderr or 'Unable to find a virtual host' in certbot_result.stderr)
      tags: ['ssl', 'certbot', 'warning']

    - name: "Finalize Nginx configuration with proper HTTPS settings"
      ansible.builtin.template:
        src: "templates/nginx.conf.j2"
        dest: "/etc/nginx/sites-available/{{ effective_domain }}.conf"
        mode: '0644'
        owner: root
        group: root
      notify: Restart Nginx service
      when: certbot_result.changed | default(false)
      tags: ['ssl', 'nginx', 'finalize']

  handlers:
    - name: Restart Nginx service
      ansible.builtin.systemd:
        name: nginx
        state: restarted
      listen: "Restart Nginx service"