# 01-install-mysql.yml
- hosts: all
  become: true
  vars:
    # effective_mysql_root_password: "{{ domain_config.mysql_root_password | default(GLOBAL_MYSQL_ROOT_PASSWORD | default('ChangemeRootPasswordPlease')) }}" # [cite: 652]
    # A generate_config.sh atualizado deve garantir que GLOBAL_MYSQL_ROOT_PASSWORD ou domain_config.mysql_root_password esteja definido.
    # Se não, o playbook falhará ou usará um valor inseguro.
    # Vamos assumir que domain_config.mysql_root_password é preenchido por generate_config.sh se o global não estiver.
    # Ou que o global SEMPRE é definido.
    # Para segurança, é crucial que esta senha seja forte e definida.
    _effective_mysql_root_password: "{{ domain_config.mysql_root_password | default(GLOBAL_MYSQL_ROOT_PASSWORD | default(omit)) }}"


    app_db_name: "{{ domain_config.mysql_db_name }}" # [cite: 652]
    app_db_user: "{{ domain_config.mysql_db_user }}" # [cite: 652]
    app_db_password: "{{ domain_config.mysql_db_password }}" # [cite: 652]

    # Privilégios mais restritos para o usuário da aplicação
    # Estes são geralmente suficientes para a maioria das aplicações web (WordPress, Laravel)
    # incluindo instalação, migrations, e operações CRUD.
    app_user_privileges: "SELECT,INSERT,UPDATE,DELETE,CREATE,ALTER,DROP,INDEX,REFERENCES,CREATE TEMPORARY TABLES,LOCK TABLES,TRIGGER"

  tasks:
    - name: "Fail if MySQL root password is not properly set"
      ansible.builtin.fail:
        msg: "MySQL root password (domain_config.mysql_root_password or GLOBAL_MYSQL_ROOT_PASSWORD) is not defined. Please set it in group_vars/all.yml or ensure generate_config.sh sets it."
      when: _effective_mysql_root_password is ansible.builtin.omit

    - name: "Install MySQL Python interface modules (pymysql is preferred)"
      ansible.builtin.apt:
        name:
          # - python3-mysqldb # Pode causar problemas com ansible_user=root e auth_socket. Pymysql é mais flexível.
          - python3-pymysql
        state: present
        update_cache: yes
      tags: ['mysql', 'deps']

    - name: "Install MySQL server package"
      ansible.builtin.apt:
        name: mysql-server
        state: present
      tags: ['mysql', 'install'] # [cite: 653]

    - name: "Ensure MySQL service is started and enabled"
      ansible.builtin.systemd:
        name: mysql # O nome do serviço pode variar (ex: mysqld), mas 'mysql' é comum no Debian/Ubuntu
        state: started
        enabled: yes
      tags: ['mysql', 'service']

    - name: "Set/Update MySQL root password"
      community.mysql.mysql_user:
        login_unix_socket: /var/run/mysqld/mysqld.sock # Usar socket para o primeiro setup do root é mais seguro
        name: root
        password: "{{ _effective_mysql_root_password }}"
        host: localhost
        state: present
        # check_implicit_admin: true # Garante que o usuário root tenha privilégios de admin
      no_log: true # Não logar a senha
      tags: ['mysql', 'config', 'security'] # [cite: 654]

    - name: "Create the application database for domain {{ domain_config.domain }}"
      community.mysql.mysql_db:
        login_user: root
        login_password: "{{ _effective_mysql_root_password }}"
        name: "{{ app_db_name }}"
        state: present
      no_log: true
      tags: ['mysql', 'db_setup'] # [cite: 655]

    - name: "Create the application database user for {{ domain_config.domain }} with limited privileges"
      community.mysql.mysql_user:
        login_user: root
        login_password: "{{ _effective_mysql_root_password }}"
        name: "{{ app_db_user }}"
        password: "{{ app_db_password }}"
        priv: "{{ app_db_name }}.*:{{ app_user_privileges }}" # Aplicando privilégios restritos [cite: 656]
        host: "localhost" # Restringir ao host local por padrão
        state: present
      no_log: true
      tags: ['mysql', 'db_user_setup']

    - name: "Display MySQL version (for informational purposes)"
      ansible.builtin.command: "mysql --version"
      register: mysql_version_output
      changed_when: false
      check_mode: false # Executar mesmo em check_mode para obter a informação
      tags: ['mysql', 'info']

    - name: "Print MySQL version (if verbosity is high)"
      ansible.builtin.debug:
        msg: "MySQL Server Version: {{ mysql_version_output.stdout }}"
      when: ansible_verbosity > 1
      tags: ['mysql', 'info'] # [cite: 657]