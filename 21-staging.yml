# 21-staging.yml
- hosts: all
  become: true
  vars:
    # Estas variáveis devem ser definidas em group_vars/all.yml (gerado por generate_config.sh)
    effective_enable_staging: "{{ domain_config.enable_staging | default(GLOBAL_ENABLE_STAGING_POLICY | default(false)) }}"
    effective_staging_subdomain_prefix: "{{ domain_config.staging_subdomain_prefix | default(GLOBAL_STAGING_DEFAULT_SUBDOMAIN_PREFIX | default('staging')) }}"

    _app_domain: "{{ domain_config.domain }}"
    _live_webroot: "/var/www/{{ _app_domain }}/html"

    _staging_full_domain: "{{ effective_staging_subdomain_prefix }}.{{ _app_domain }}"
    _staging_webroot: "/var/www/{{ _staging_full_domain }}/html"
    _staging_log_dir: "/var/www/{{ _staging_full_domain }}/logs" # Diretório de log para o site de staging

    _web_user: "{{ domain_config.linux_username | default(GLOBAL_LINUX_USERNAME | default('www-data')) }}"
    _web_group: "{{ domain_config.linux_group | default(GLOBAL_LINUX_GROUP | default('www-data')) }}"

    # Configurações do banco de dados de Staging
    _staging_db_name_suffix: "{{ domain_config.staging_db_name_suffix | default('_staging') }}"
    _staging_db_name: "{{ domain_config.mysql_db_name }}{{ _staging_db_name_suffix }}"
    # Por padrão, usa o mesmo usuário e senha do banco de dados live, mas para um banco de dados de staging diferente.
    # Para maior isolamento, um usuário de BD diferente pode ser configurado em generate_config.sh.
    _staging_db_user: "{{ domain_config.staging_db_user | default(domain_config.mysql_db_user) }}"
    _staging_db_password: "{{ domain_config.staging_db_password | default(domain_config.mysql_db_password) }}"
    _staging_db_host: "{{ domain_config.db_host | default(GLOBAL_DB_HOST | default('127.0.0.1')) }}" # Assume mesmo host de DB

    _php_version_staging: "{{ domain_config.php_version_staging | default(domain_config.php_version) }}"


  when:
    - domain_config is defined
    - domain_config.domain is defined
    - effective_enable_staging | bool

  tasks:
    - name: "Notify: Starting Staging environment setup for {{ _app_domain }}"
      ansible.builtin.debug:
        msg:
          - "Attempting to set up a Staging environment for '{{ _app_domain }}'."
          - "Live webroot: {{ _live_webroot }}"
          - "Staging webroot: {{ _staging_webroot }}"
          - "Staging domain will be: {{ _staging_full_domain }}"
          - "Staging DB name: {{ _staging_db_name }}"
      tags: ['staging', 'info']

    - name: "Create Staging webroot directory: {{ _staging_webroot }}"
      ansible.builtin.file:
        path: "{{ _staging_webroot }}"
        state: directory
        owner: "{{ _web_user }}"
        group: "{{ _web_group }}"
        mode: '0755'
      tags: ['staging', 'filesystem']

    - name: "Create Staging log directory: {{ _staging_log_dir }}"
      ansible.builtin.file:
        path: "{{ _staging_log_dir }}"
        state: directory
        owner: "{{ _web_user }}"
        group: "{{ _web_group }}"
        mode: '0775' # Logs precisam ser graváveis pelo servidor web
      tags: ['staging', 'filesystem', 'logging']

    - name: "Synchronize files from live site '{{ _live_webroot }}' to staging '{{ _staging_webroot }}'"
      ansible.posix.synchronize:
        src: "{{ _live_webroot }}/"
        dest: "{{ _staging_webroot }}/" # Adicionado '/' no final do dest
        archive: yes
        delete: yes # Remove arquivos no destino que não existem na origem
        rsync_opts:
          - "--exclude=.git"
          - "--exclude=wp-config.php" # Não sobrescreve wp-config.php se já existir/for configurado separadamente
          - "--exclude=.env" # Não sobrescreve .env
          # Adicione outros arquivos/diretórios a serem excluídos (ex: uploads grandes, caches)
          # - "--exclude=wp-content/uploads/"
      become: true # synchronize pode precisar de sudo para preservar permissões ou acessar arquivos
      # become_user: root # Removido, 'become: true' é suficiente.
      # delegate_to: "{{ inventory_hostname }}" # Desnecessário se o playbook já roda no target certo
      tags: ['staging', 'files_sync']
      notify: Adjust Staging Config Files

    # --- Database Setup for Staging ---
    - name: "Create Staging database '{{ _staging_db_name }}'"
      community.mysql.mysql_db:
        login_user: root
        login_password: "{{ domain_config.mysql_root_password | default(GLOBAL_MYSQL_ROOT_PASSWORD) }}" # Necessita da senha root do MySQL
        name: "{{ _staging_db_name }}"
        state: present
      tags: ['staging', 'database']
      # Esta task NÃO copia dados. Isso deve ser feito manualmente ou com outro script/playbook.

    - name: "Grant privileges to user '{{ _staging_db_user }}' on Staging database '{{ _staging_db_name }}'"
      community.mysql.mysql_user:
        login_user: root
        login_password: "{{ domain_config.mysql_root_password | default(GLOBAL_MYSQL_ROOT_PASSWORD) }}"
        name: "{{ _staging_db_user }}"
        password: "{{ _staging_db_password }}" # Se for um novo usuário, esta senha será definida.
        priv: "{{ _staging_db_name }}.*:ALL" # Conceder ALL para o usuário no seu próprio BD de staging.
        host: "{{ _staging_db_host | regex_replace('^(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})$', '\\1', ignorecase=True) if _staging_db_host != 'localhost' else 'localhost' }}"
        state: present
      tags: ['staging', 'database']
      when: _staging_db_user is defined and _staging_db_user | length > 0
      # Se _staging_db_user for o mesmo que o usuário live, esta task apenas adiciona privilégios ao novo BD.

    # --- Nginx Configuration for Staging ---
    - name: "Create Nginx server block for Staging site '{{ _staging_full_domain }}'"
      ansible.builtin.template:
        dest: "/etc/nginx/sites-available/{{ _staging_full_domain }}.conf"
        content: |
          server {
              listen 80;
              listen [::]:80;
              server_name {{ _staging_full_domain }}; # Não adicionar www. para staging por padrão
              root {{ _staging_webroot }};
              index index.php index.html index.htm;

              access_log {{ _staging_log_dir }}/access.log;
              error_log {{ _staging_log_dir }}/error.log warn;

              # Se SSL for habilitado para staging, redirecionar para HTTPS
              {% if domain_config.enable_ssl_staging | default(false) %}
              location / {
                  return 301 https://$host$request_uri;
              }
              {% else %}
              location / {
                  try_files $uri $uri/ /index.php?$args; # Para WordPress
                  # Para Laravel: try_files $uri $uri/ /index.php?$query_string;
              }

              location ~ \.php$ {
                  include fastcgi_params;
                  fastcgi_pass unix:/run/php/php{{ _php_version_staging }}-fpm.sock;
                  fastcgi_index index.php;
                  fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                  # Adicione outras configs de fastcgi se necessário
              }
              {% endif %}
              # Incluir configs de segurança ou outros helpers se necessário
              # include /etc/nginx/snippets/security.conf;
          }

          {% if domain_config.enable_ssl_staging | default(false) %}
          server {
              listen 443 ssl http2;
              listen [::]:443 ssl http2;
              server_name {{ _staging_full_domain }};
              root {{ _staging_webroot }};
              index index.php index.html index.htm;

              access_log {{ _staging_log_dir }}/access.log;
              error_log {{ _staging_log_dir }}/error.log warn;

              ssl_certificate /etc/letsencrypt/live/{{ _staging_full_domain }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/{{ _staging_full_domain }}/privkey.pem;
              include /etc/nginx/snippets/ssl-params.conf; # Supondo um snippet de SSL global

              location / {
                  try_files $uri $uri/ /index.php?$args; # Para WordPress
                  # Para Laravel: try_files $uri $uri/ /index.php?$query_string;
              }

              location ~ \.php$ {
                  include fastcgi_params;
                  fastcgi_pass unix:/run/php/php{{ _php_version_staging }}-fpm.sock;
                  fastcgi_index index.php;
                  fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
              }
          }
          {% endif %}
        owner: root
        group: root
        mode: '0644'
      notify: Restart Nginx service
      tags: ['staging', 'nginx']

    - name: "Enable Nginx site for Staging '{{ _staging_full_domain }}'"
      ansible.builtin.file:
        src: "/etc/nginx/sites-available/{{ _staging_full_domain }}.conf"
        dest: "/etc/nginx/sites-enabled/{{ _staging_full_domain }}.conf"
        state: link
        owner: root
        group: root
      notify: Restart Nginx service
      tags: ['staging', 'nginx']

    - name: "Reminder: Staging environment for '{{ _staging_full_domain }}' requires further manual setup"
      ansible.builtin.debug:
        msg:
          - "----------------------------------------------------------------------------------"
          - "ACTION REQUIRED: Staging Environment for {{ _staging_full_domain }}"
          - "----------------------------------------------------------------------------------"
          - "Basic Staging setup (file sync, empty DB, Nginx config) initiated."
          - "CRITICAL NEXT STEPS:"
          - "1. Populate Staging Database: Manually export the LIVE database ('{{ domain_config.mysql_db_name }}') and import it into the STAGING database ('{{ _staging_db_name }}')."
          - "   Example: mysqldump -u LIVE_USER -p LIVE_DB | mysql -u STAGING_USER -p STAGING_DB"
          - "2. Adjust Configuration Files (wp-config.php / .env) in '{{ _staging_webroot }}' - This playbook attempts basic changes, but verify them:"
          - "   - WordPress: Ensure DB_NAME, DB_USER, DB_PASSWORD, WP_HOME, WP_SITEURL (if in wp-config) are correct for staging. Consider adding define('WP_ENVIRONMENT_TYPE', 'staging');"
          - "   - Laravel: Ensure DB_DATABASE, DB_USERNAME, DB_PASSWORD, APP_URL, APP_ENV ('staging' or 'local') are correct for staging."
          - "3. URL Search-Replace (Especially for WordPress): After importing the database, run a search-replace for URLs."
          - "   Example for WordPress (requires WP-CLI in {{ _staging_webroot }}):"
          - "     wp search-replace 'https://{{ _app_domain }}' 'https://{{ _staging_full_domain }}' --all-tables --skip-columns=guid --allow-root"
          - "     (If Staging is not HTTPS, adjust the URL schéma accordingly)"
          - "4. SSL for Staging: If 'domain_config.enable_ssl_staging' is true, this playbook created an Nginx config for HTTPS on port 443."
          - "   You will need to obtain an SSL certificate for '{{ _staging_full_domain }}' (e.g., using Certbot with a similar process as for the live domain, or a wildcard certificate)."
          - "   If SSL for staging is not enabled, the site will be on HTTP."
          - "5. Test Staging Site: Thoroughly test all functionalities on 'https://{{ _staging_full_domain }}' (or http if no SSL)."
          - "6. Consider Disabling: Search engine indexing, outgoing emails (or redirect to a test mailbox), and third-party services that should not run on staging."
          - "----------------------------------------------------------------------------------"
      tags: ['staging', 'info', 'post_actions']

  handlers:
    - name: Adjust Staging Config Files
      block:
        - name: "Adjust WordPress config for Staging {{ _staging_full_domain }}"
          ansible.builtin.lineinfile:
            path: "{{ _staging_webroot }}/wp-config.php"
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            owner: "{{ _web_user }}"
            group: "{{ _web_group }}"
            mode: '0600' # wp-config.php should be secure
          loop:
            - { regexp: "^define\\s*\\(\\s*'DB_NAME',.*", line: "define( 'DB_NAME', '{{ _staging_db_name }}' );" }
            - { regexp: "^define\\s*\\(\\s*'DB_USER',.*", line: "define( 'DB_USER', '{{ _staging_db_user }}' );" }
            - { regexp: "^define\\s*\\(\\s*'DB_PASSWORD',.*", line: "define( 'DB_PASSWORD', '{{ _staging_db_password }}' );" }
            - { regexp: "^define\\s*\\(\\s*'DB_HOST',.*", line: "define( 'DB_HOST', '{{ _staging_db_host }}' );" }
            # WP_HOME and WP_SITEURL são melhor alterados no banco de dados via search-replace
            - { regexp: "^define\\s*\\(\\s*'WP_ENVIRONMENT_TYPE',.*", line: "define( 'WP_ENVIRONMENT_TYPE', 'staging' );" }
          when: domain_config.platform == "wordpress" and (ansible_check_mode or ansible_diff_mode or lookup('file', _staging_webroot + '/wp-config.php', errors='ignore') is file)

        - name: "Adjust Laravel .env for Staging {{ _staging_full_domain }}"
          ansible.builtin.lineinfile:
            path: "{{ _staging_webroot }}/.env"
            regexp: "^{{ item.key }}="
            line: "{{ item.key }}={{ item.value }}"
            owner: "{{ _web_user }}"
            group: "{{ _web_group }}"
            mode: '0600' # .env should be secure
          loop:
            - { key: "APP_URL", value: "https://{{ _staging_full_domain }}" } # Ou http se SSL não estiver habilitado para staging
            - { key: "APP_ENV", value: "staging" } # Ou 'local'/'development'
            - { key: "DB_HOST", value: "{{ _staging_db_host }}" }
            - { key: "DB_DATABASE", value: "{{ _staging_db_name }}" }
            - { key: "DB_USERNAME", value: "{{ _staging_db_user }}" }
            - { key: "DB_PASSWORD", value: "\"{{ _staging_db_password }}\"" } # Adicionar aspas se a senha contiver caracteres especiais
            # Considere desabilitar Telescope, Debugbar, etc. para staging se APP_ENV=staging
            - { key: "TELESCOPE_ENABLED", value: "false" } # Exemplo
            - { key: "APP_DEBUG", value: "false" } # Recomendado para staging se for similar a produção
          when: domain_config.platform == "laravel" and (ansible_check_mode or ansible_diff_mode or lookup('file', _staging_webroot + '/.env', errors='ignore') is file)
      listen: "Adjust Staging Config Files"
      tags: ['staging', 'config_files']

    - name: Restart Nginx service
      ansible.builtin.systemd:
        name: nginx
        state: restarted
      listen: "Restart Nginx service"