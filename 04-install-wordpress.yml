- hosts: all  
  become: true  

  tasks:  
    - name: Configure Nginx  
      template:  
        src: templates/nginx.conf.j2  
        dest: "/etc/nginx/sites-available/{{ domain }}"  
      notify: Restart Nginx  

    - name: Ensure sites-available directory exists
      ansible.builtin.file:
        path: /etc/nginx/sites-available
        state: directory
        mode: '0755'

    - name: Ensure sites-enabled directory exists
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled
        state: directory
        mode: '0755'

    - name: Configure Nginx for WordPress
      template:
        src: templates/nginx.conf.j2
        dest: /etc/nginx/sites-available/{{ domain }}
        mode: '0644'
      notify: Restart Nginx

    - name: Enable Nginx site
      ansible.builtin.file:
        src: /etc/nginx/sites-available/{{ domain }}
        dest: /etc/nginx/sites-enabled/{{ domain }}
        state: link
        force: yes
      notify: Restart Nginx

    - name: Add user to www-data group  
      user:  
        name: "{{ linux_username }}"  
        groups: www-data  
        append: yes  

    - name: Create site directory  
      file:  
        path: "/var/www/{{ domain }}/html"  
        state: directory  
        mode: '0775'  
        owner: www-data  
        group: www-data  

    - name: Create site logs directory  
      file:  
        path: "/var/www/{{ domain }}/logs"  
        state: directory  
        mode: '0775'  
        owner: www-data  
        group: www-data  

    - name: Create cache directory  
      file:  
        path: "/etc/nginx/cache/{{ domain }}"  
        state: directory  
        mode: '0755'  
        owner: www-data  
        group: www-data  

    - name: Download WordPress core  
      shell: wp core download --locale='{{ wordpress_locale }}'  
      args:  
        chdir: "/var/www/{{ domain }}/html"  
      become_user: "{{ linux_username }}"  

    - name: Create wp-config.php  
      shell: wp config create --dbname={{ mysql_db_name }} --dbuser={{ mysql_db_user }} --dbpass='{{ mysql_db_password }}' --dbprefix={{ wordpress_db_prefix }} --locale={{ wordpress_locale }}  
      args:  
        chdir: "/var/www/{{ domain }}/html"  
      become_user: "{{ linux_username }}"  

    - name: Add custom WordPress configurations to wp-config.php
      blockinfile:
        path: "/var/www/{{ domain }}/html/wp-config.php"
        insertbefore: "/* That's all, stop editing! Happy publishing. */"
        block: |
          define('WP_MEMORY_LIMIT', '{{ wp_memory_limit }}');
          define('WP_MAX_MEMORY_LIMIT', '{{ wp_max_memory_limit }}');
          define('FORCE_SSL_LOGIN', {{ force_ssl_login }});
          define('FORCE_SSL_ADMIN', {{ force_ssl_admin }});
          define('DISALLOW_FILE_EDIT', {{ disallow_file_edit }});
          {% if fs_method %}
          define('FS_METHOD', '{{ fs_method }}');
          {% endif %}
          define('DISABLE_WP_CRON', {{ disable_wp_cron }});
          {% if install_redis %}
          define('WP_REDIS_HOST', '{{ wp_redis_host }}');
          define('WP_REDIS_PORT', {{ wp_redis_port }});
          define('WP_REDIS_PASSWORD', '{{ wp_redis_password }}');
          define('WP_REDIS_DATABASE', {{ wp_redis_database }});
          {% endif %}
        marker: "// {mark} ANSIBLE MANAGED BLOCK - WordPress Custom Configs"

    - name: Install WordPress
      ansible.builtin.shell: sudo -u www-data wp core install --url='http://{{ domain }}' --title='{{ wordpress_title }}' --admin_user='{{ wordpress_admin_user }}' --admin_password='{{ wordpress_admin_password }}' --admin_email='{{ wordpress_admin_email }}'
      args:
        chdir: "/var/www/{{ domain }}/html"

    - name: Install WordPress plugins from WordPress.org
      shell: wp plugin install {{ item.slug }} --allow-root
      args:
        chdir: "/var/www/{{ domain }}/html"
      loop: "{{ plugins | selectattr('source', 'equalto', 'wordpress') | list }}"
      when: install_plugins | bool

    - name: Copy local plugin ZIP files to server
      copy:
        src: "{{ item.path }}"
        dest: "/tmp/{{ item.path | basename }}"
        mode: '0644'
      loop: "{{ plugins | selectattr('source', 'equalto', 'local') | list }}"
      when: install_plugins | bool

    - name: Install WordPress plugins from local ZIP files
      shell: wp plugin install /tmp/{{ item.path | basename }} --allow-root
      args:
        chdir: "/var/www/{{ domain }}/html"
      loop: "{{ plugins | selectattr('source', 'equalto', 'local') | list }}"
      when: install_plugins | bool

    - name: Clean up temporary ZIP files
      file:
        path: "/tmp/{{ item.path | basename }}"
        state: absent
      loop: "{{ plugins | selectattr('source', 'equalto', 'local') | list }}"
      when: install_plugins | bool

    - name: Ensure all installed plugins are deactivated
      shell: wp plugin deactivate {{ item.slug | default((item.path | basename | splitext)[0]) }} --allow-root
      args:
        chdir: "/var/www/{{ domain }}/html"
      loop: "{{ plugins }}"
      when: install_plugins | bool
      ignore_errors: yes  # In case plugin wasn't activated

    - name: Set up system cron for wp-cron.php when DISABLE_WP_CRON is true
      cron:
        name: "Run wp-cron.php for {{ domain }}"
        minute: "*/1"
        job: "/usr/bin/php -q /var/www/{{ domain }}/html/wp-cron.php"
        user: www-data
        state: present
      when: disable_wp_cron | bool

    - name: Remove default wp-cron if DISABLE_WP_CRON is false
      cron:
        name: "Run wp-cron.php for {{ domain }}"
        state: absent
      when: not disable_wp_cron | bool

    - name: Set correct permissions for directories  
      file:  
        path: "/var/www/{{ domain }}/html"  
        state: directory  
        recurse: yes  
        mode: '0775'  
        owner: www-data  
        group: www-data  

    - name: Find all WordPress files  
      find:  
        paths: "/var/www/{{ domain }}/html"  
        file_type: file  
        recurse: yes  
      register: wp_files  

  handlers:
    - name: Restart Nginx
      ansible.builtin.service:
        name: nginx
        state: restarted